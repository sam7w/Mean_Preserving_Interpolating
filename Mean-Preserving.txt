' ========= Function 1: Compute spline coefficients =========
Function MeanPreservingSplineCoeffs(xRange As Range, yRange As Range) As Variant
    Dim N As Long, i As Long
    Dim x() As Double, y() As Double
    Dim h As Double
    Dim M() As Double
    Dim A() As Double, B() As Double, C() As Double, D() As Double
    Dim cPrime() As Double, dPrime() As Double
    Dim coeffA() As Double, coeffB() As Double, coeffC() As Double, coeffD() As Double
    Dim output() As Variant

    N = xRange.Count
    If N <> yRange.Count Or N < 3 Then
        MeanPreservingSplineCoeffs = CVErr(xlErrValue)
        Exit Function
    End If

    ReDim x(1 To N)
    ReDim y(1 To N)

    For i = 1 To N
        x(i) = xRange.Cells(i, 1).Value
        y(i) = yRange.Cells(i, 1).Value
    Next i

    h = x(2) - x(1) ' Assume uniform spacing

    ReDim M(1 To N)
    ReDim A(2 To N - 1), B(2 To N - 1), C(2 To N - 1), D(2 To N - 1)

    ' Build tridiagonal system
    For i = 2 To N - 1
        A(i) = h / 6
        B(i) = 2 * h / 3
        C(i) = h / 6
        D(i) = (y(i + 1) - y(i)) - (y(i) - y(i - 1))
    Next i

    ' Thomas algorithm
    ReDim cPrime(2 To N - 1)
    ReDim dPrime(2 To N - 1)

    cPrime(2) = C(2) / B(2)
    dPrime(2) = D(2) / B(2)

    For i = 3 To N - 2
        Dim denom As Double
        denom = B(i) - A(i) * cPrime(i - 1)
        cPrime(i) = C(i) / denom
        dPrime(i) = (D(i) - A(i) * dPrime(i - 1)) / denom
    Next i

    M(N - 1) = dPrime(N - 2)
    For i = N - 2 To 2 Step -1
        M(i) = dPrime(i) - cPrime(i) * M(i + 1)
    Next i

    M(1) = 0
    M(N) = 0

    ' Compute spline coefficients
    ReDim coeffA(1 To N - 1)
    ReDim coeffB(1 To N - 1)
    ReDim coeffC(1 To N - 1)
    ReDim coeffD(1 To N - 1)
    ReDim output(1 To N - 1, 1 To 5)

    For i = 1 To N - 1
        coeffA(i) = y(i)
        coeffB(i) = (y(i + 1) - y(i)) / h - h * (M(i + 1) + 2 * M(i)) / 6
        coeffC(i) = M(i) / 2
        coeffD(i) = (M(i + 1) - M(i)) / (6 * h)

        output(i, 1) = coeffA(i)
        output(i, 2) = coeffB(i)
        output(i, 3) = coeffC(i)
        output(i, 4) = coeffD(i)
        output(i, 5) = x(i)
    Next i

    MeanPreservingSplineCoeffs = output
End Function

' ========= Function 2: Evaluate spline at arbitrary x =========
Function EvaluateSpline(xVal As Double, coeffs As Range) As Double
    Dim i As Long, n As Long
    Dim a As Double, b As Double, c As Double, d As Double
    Dim xStart As Double, xNext As Double
    Dim delta As Double

    n = coeffs.Rows.Count

    ' Find the interval where xVal belongs
    For i = 1 To n
        xStart = coeffs.Cells(i, 5).Value
        If i < n Then
            xNext = coeffs.Cells(i + 1, 5).Value
        Else
            xNext = xStart + (xStart - coeffs.Cells(i - 1, 5).Value) ' extrapolate last interval
        End If

        If xVal >= xStart And xVal < xNext Then
            Exit For
        End If
    Next i

    ' Clamp to last interval if xVal beyond range
    If i > n Then i = n

    a = coeffs.Cells(i, 1).Value
    b = coeffs.Cells(i, 2).Value
    c = coeffs.Cells(i, 3).Value
    d = coeffs.Cells(i, 4).Value
    xStart = coeffs.Cells(i, 5).Value

    delta = xVal - xStart
    EvaluateSpline = a + b * delta + c * delta ^ 2 + d * delta ^ 3
End Function
